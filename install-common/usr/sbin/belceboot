#!/bin/sh

bb_pxe_sections(){
	sed -ne "/^\[/{s%^\[%%;s%\].*$%%;p}" "$1"
}

bb_pxe_getsection(){
	sed -ne "/^\[$2\]/,/^\[/{/^\[/d;p}" "$1"
}

bb_pxe_list_headers(){
	ls -1 $BB_PXE_HEADERS |grep -v "$BB_PXE_DEFAULT"
}

bb_pxe_header(){
	if [ -r "$BB_PXE_HEADERS/$1" ] ; then
		cat "$BB_PXE_HEADERS/$1"
	else
		cat "$BB_PXE_HEADERS/$BB_PXE_DEFAULT"
	fi
}

bb_pxe_list_footers(){
	ls -1 $BB_PXE_FOOTERS |grep -v "$BB_PXE_DEFAULT"
}

bb_pxe_footer(){
	if [ -r "$BB_PXE_FOOTERS/$1" ] ; then
		cat "$BB_PXE_FOOTERS/$1"
	else
		cat "$BB_PXE_FOOTERS/$BB_PXE_DEFAULT"
	fi
}

bb_pxe_cfg(){
 	REL_DIR="$1"
 	PXE_CFG="$2"
	TMP_PXE="$3"
	HEAD_FILE=""
	BOTTOM_FILE=""
	TMP_FILE="$(tempfile)"
	for s in $(bb_pxe_sections "$PXE_CFG") ; do
		# expand PXE_CFG
		echo "cat <<_@_EOF_@_" > $TMP_FILE
		bb_pxe_getsection "$PXE_CFG" "$s" >> $TMP_FILE
		echo "_@_EOF_@_" >> $TMP_FILE
		. $TMP_FILE >> "$TMP_PXE/$s"
	done
	rm -f "$TMP_FILE"
}

bb_write_fstab(){
	if bb_is_true "$BB_CONFIGURE_FSTAB" ; then
		FSTAB_FILE="/etc/fstab"
	else
		mkdir -p "${BB_DRY_DIR}/etc/"
		FSTAB_FILE="${BB_DRY_DIR}/etc/fstab"
	fi
	! grep -qF "$1" $FSTAB_FILE || return 0
	grep -q "$BB_FSTAB_BEGIN" "$FSTAB_FILE" || echo "$BB_FSTAB_BEGIN" >> "$FSTAB_FILE"
	grep -q "$BB_FSTAB_END" "$FSTAB_FILE" || echo "$BB_FSTAB_END" >> "$FSTAB_FILE"
	sed -i -e "/$BB_FSTAB_END/i$1" $FSTAB_FILE
}

bb_tftp_export(){
	for d in $BB_TFTP_SUBDIRS; do
		BB_TFTP_DIR="$BB_TFTP_BASE/$d"
		mkdir -p "$BB_TFTP_DIR/$1"
		bb_write_fstab "$2	$BB_TFTP_DIR/$1	none	bind	0	0"
	done
}

bb_add_image(){
	IMG_DIR="$BB_IMAGE_DIR/$1"
	TMP_PXE="$2"
	IMG_CFG="$IMG_DIR/$BB_IMAGE_CFG"
	PXE_CFG="$IMG_DIR/$BB_IMAGE_PXE"
	NBD_IMAGE=""
	ISO_IMAGE=""
	BOOT_DIR=""
	. $IMG_CFG
	if [ "$NBD_IMAGE" ] && [ -r "$NBD_IMAGE" ] ; then
		belceboot-nbd $FORCE export "$NBD_IMAGE"
	elif [ "$ISO_IMAGE" ] && [ -r "$ISO_IMAGE" ] ; then
		echo " TODO: write belceboot-iso ...."
	else
		bb_warn_msg "add-image: Skipping unknown image file in $1"
	fi
	if [ "$BOOT_DIR" ] && [ -d "$BOOT_DIR" ] ; then
		bb_tftp_export "$1" "$BOOT_DIR"
	fi
	if [ -r "$PXE_CFG" ] ; then
		bb_pxe_cfg  "$1" "$PXE_CFG" "$TMP_PXE"

	fi

}

bb_update(){
	TMP_PXE="$(mktemp -d)"
	for d in $(ls -1 "$BB_IMAGE_DIR") ; do
		if [ -d "$BB_IMAGE_DIR/$d" ] && [ -r "$BB_IMAGE_DIR/$d/$BB_IMAGE_CFG" ] ; then
			if bb_is_enabled "$d" ; then
				bb_info_msg "Processing $d"
				bb_add_image "$d" "$TMP_PXE"
			else
				bb_warn_msg "Skipping disabled directory $d"
			fi
		fi
	done
	PXE_REQUIRED_FILES="/usr/lib/syslinux/gpxelinux.0 /usr/lib/syslinux/pxelinux.0 /usr/lib/syslinux/vesamenu.c32 /usr/lib/syslinux/menu.c32"
	for f in $PXE_REQUIRED_FILES ; do
		[ ! -r $f ] || cp $f $BB_TFTP_BASE/
	done
	PXE_FILE_LIST="$({ bb_pxe_list_headers; bb_pxe_list_footers; ls -1 "$TMP_PXE" ; } |sort -u)"
	for d in $BB_TFTP_SUBDIRS; do
		BB_PXE_DIR="$BB_TFTP_BASE/$d/$BB_PXE_SUBDIR"
		mkdir -p $BB_PXE_DIR
		for f in $PXE_FILE_LIST ; do
			bb_pxe_header "$f" > "$BB_PXE_DIR/$f"
			[ ! -r "$TMP_PXE/$f" ] || cat "$TMP_PXE/$f" >> "$BB_PXE_DIR/$f"
			bb_pxe_footer "$f" >> "$BB_PXE_DIR/$f"
		done

		if [ "$BB_PXE_BACKGROUND" ] && [ -r "$BB_PXE_BACKGROUND" ] ; then
			cp "$BB_PXE_BACKGROUND" "$BB_PXE_DIR/bb_back.png"
		fi
		for f in $PXE_REQUIRED_FILES ; do
	                BB_TFTP_DIR="$BB_TFTP_BASE/$d"
			if [ -r $f ] ; then
				F="$(basename "$f")"
				( cd $BB_TFTP_DIR ; ln -fs ../$F )
			fi
		done
		# link default if not present
		if [ ! -r "$BB_PXE_DIR/default" ] && [ -r "$BB_PXE_DIR/default.$d" ] ; then
			( cd $BB_PXE_DIR; ln -s default.$d default ) || true
		fi
	done
	rm -fr "$TMP_PXE"
}

usage(){
cat << EOF >&2
Usage: $(basename "$0") [options] update

        Available options: --force
EOF
}

BB_FSTAB_BEGIN="### >>>>> BEGIN_BELCEBOOT_DATA"
BB_FSTAB_END="### <<<<< END_BELCEBOOT_DATA"


if [ "$1" = "--force" ]; then
	FORCE="--force"
	shift
fi

[ "$1" ] || usage

. /usr/share/belceboot/belceboot-common


case "$1" in
	update)
		bb_update
		mount -a || true
		;;
	*)
		usage
		;;
esac
exit 0

